/* Используя класс Thread, мы можем выделить в приложении несколько потоков,
 * которые будут выполняться одновременно. Во-первых, для запуска нового потока
 * нам надо определить задачу в приложении, которую будет выполнять данный поток.
 * Для этого мы можем добавить новый метод, производящий какие-либо действия.
Для создания нового потока используется делегат ThreadStart, который получает
в качестве параметра метод, который мы определил выше. И чтобы запустить поток,
вызывается метод Start. Рассмотрим на примере: */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            // создаем новый поток
            Thread myThread = new Thread(new ThreadStart(Count));
            myThread.Start(); // запускаем поток

            for (int i = 1; i < 9; i++)
            {
                Console.WriteLine("Главный поток:");
                Console.WriteLine(i * i);
                Thread.Sleep(300);
            }

            Console.ReadLine();
        }
        public static void Count()
        {
            for (int i = 1; i < 9; i++)
            {
                Console.WriteLine("Второй поток:");
                Console.WriteLine(i * i);
                Thread.Sleep(400);
            }
            /*
             Здесь новый поток будет производить действия, определенные в методе Count.
             В данном случае это возведение в квадрат числа и вывод его на экран.
             И после каждого умножения с помощью метода Thread.Sleep мы усыпляем поток на 400 миллисекунд.
             Чтобы запустить этот метод в качестве второго потока, мы сначала создаем объект потока:
             Thread myThread = new Thread(new ThreadStart(Count));.
             В конструктор передается делегат ThreadStart, который в качестве параметра принимает метод Count.
             И следующей строкой myThread.Start() мы запускаем поток. После этого управление передается
             главному потоку, и выполняются все остальные действия, определенные в методе Main.
            Таким образом, в нашей программе будут работать одновременно главный поток,
            представленный методом Main, и второй поток. Кроме действий по созданию второго потока,
            в главном потоке также производятся некоторые вычисления. Как только все потоки отработают,
            программа завершит свое выполнение.*/
        }
    }
}
